一、未归类系列A
此系列暂未归类。
指令码    助记符                            说明
0x00         nop                                什么都不做
0x01        aconst_null                   将null推送至栈顶
二、const系列
该系列命令主要负责把简单的数值类型送到栈顶。该系列命令不带参数。注意只把简单的数值类型送到栈顶时，才使用如下的命令。
比如对应int型才该方式只能把-1,0,1,2,3,4,5（分别采用iconst_m1,iconst_0, iconst_1, iconst_2, iconst_3, iconst_4, iconst_5）
送到栈顶。对于int型，其他的数值请使用push系列命令（比如bipush）。
指令码    助记符                            说明
0x02         iconst_m1                   将int型(-1)推送至栈顶
0x03         iconst_0                      将int型(0)推送至栈顶
0x04         iconst_1                      将int型(1)推送至栈顶
0x05         iconst_2                      将int型(2)推送至栈顶
0x06         iconst_3                      将int型(3)推送至栈顶
0x07         iconst_4                      将int型(4)推送至栈顶
0x08         iconst_5                      将int型(5)推送至栈顶
0x09         lconst_0                      将long型(0)推送至栈顶
0x0a         lconst_1                      将long型(1)推送至栈顶
0x0b         fconst_0                      将float型(0)推送至栈顶
0x0c         fconst_1                      将float型(1)推送至栈顶
0x0d         fconst_2                      将float型(2)推送至栈顶
0x0e         dconst_0                     将double型(0)推送至栈顶
0x0f          dconst_1                     将double型(1)推送至栈顶
三、push系列
该系列命令负责把一个整形数字（长度比较小）送到到栈顶。该系列命令有一个参数，用于指定要送到栈顶的数字。
注意该系列命令只能操作一定范围内的整形数值，超出该范围的使用将使用ldc命令系列。
指令码    助记符                            说明
0x10          bipush    将单字节的常量值(-128~127)推送至栈顶
0x11           sipush    将一个短整型常量值(-32768~32767)推送至栈顶
四、ldc系列
该系列命令负责把数值常量或String常量值从常量池中推送至栈顶。该命令后面需要给一个表示常量在常量池中位置(编号)的参数，
哪些常量是放在常量池呢？比如：final static int id=32768;final static float double=6.5。
对于const系列命令和push系列命令操作范围之外的数值类型常量，都放在常量池中.
另外，所有不是通过new创建的String都是放在常量池中的。
指令码    助记符                               说明
0x12            ldc                 将int, float或String型常量值从常量池中推送至栈顶
0x13          ldc_w               将int, float或String型常量值从常量池中推送至栈顶（宽索引）
0x14          ldc2_w             将long或double型常量值从常量池中推送至栈顶（宽索引）
五、load系列
5.1、load系列A
该系列命令负责把本地变量的送到栈顶。这里的本地变量不仅可以是数值类型，还可以是引用类型。
对于前四个本地变量可以采用iload_0,iload_1,iload_2,iload_3(它们分别表示第0,1,2,3个整形变量)这种不到参数的简化命令形式。
对于第4以上的本地变量将使用iload命令这种形式，在它后面给一参数，以表示是对第几个(从0开始)本类型的本地变量进行操作。
对本地变量所进行的编号，是对所有类型的本地变量进行的（并不按照类型分类）。
对于非静态函数，第一变量是this,即其对于的操作是aload_0.
还有函数传入参数也算本地变量，在进行编号时，它是先于函数体的本地变量的。
指令码    助记符                                        说明
0x15          iload                          将指定的int型本地变量推送至栈顶
0x16          lload                          将指定的long型本地变量推送至栈顶
0x17          fload                          将指定的float型本地变量推送至栈顶
0x18          dload                         将指定的double型本地变量推送至栈顶
0x19          aload                         将指定的引用类型本地变量推送至栈顶
0x1a          iload_0                      将第一个int型本地变量推送至栈顶
0x1b          iload_1                      将第二个int型本地变量推送至栈顶
0x1c          iload_2                      将第三个int型本地变量推送至栈顶
0x1d          iload_3                      将第四个int型本地变量推送至栈顶
0x1e          lload_0                      将第一个long型本地变量推送至栈顶
0x1f           lload_1                      将第二个long型本地变量推送至栈顶
0x20          lload_2                      将第三个long型本地变量推送至栈顶
0x21          lload_3                      将第四个long型本地变量推送至栈顶
0x22          fload_0                     将第一个float型本地变量推送至栈顶
0x23          fload_1                     将第二个float型本地变量推送至栈顶
0x24          fload_2                     将第三个float型本地变量推送至栈顶
0x25          fload_3                     将第四个float型本地变量推送至栈顶
0x26         dload_0                     将第一个double型本地变量推送至栈顶
0x27         dload_1                     将第二个double型本地变量推送至栈顶
0x28         dload_2                     将第三个double型本地变量推送至栈顶
0x29         dload_3                     将第四个double型本地变量推送至栈顶
0x2a         aload_0                     将第一个引用类型本地变量推送至栈顶
0x2b         aload_1                     将第二个引用类型本地变量推送至栈顶
0x2c         aload_2                     将第三个引用类型本地变量推送至栈顶
0x2d         aload_3                     将第四个引用类型本地变量推送至栈顶
5.2、load系列B
该系列命令负责把数组的某项送到栈顶。该命令根据栈里内容来确定对哪个数组的哪项进行操作。
比如，如果有成员变量：final String names[]={"robin","hb"};
那么这句话：String str=names[0];对应的指令为
   17:
aload_0                                                            //将this引用推送至栈顶，即压入栈。
   18:
getfield #5; //Field names:[Ljava/lang/String;//将栈顶的指定的对象的第5个实例域（Field）的值（这个值可能是引用，这里就是引用）压入栈顶
   21:
iconst_0                                                            //数组的索引值（下标）推至栈顶，即压入栈
   22:
aaload                                                              //根据栈里内容来把name数组的第一项的值推至栈顶
   23:
astore 5                                                       //把栈顶的值存到str变量里。因为str在我的程序中是其所在非静态函数的第5个变量(从0开始计数)，
指令码    助记符                               说明
0x2e         iaload                     将int型数组指定索引的值推送至栈顶
0x2f          laload                     将long型数组指定索引的值推送至栈顶
0x30         faload                     将float型数组指定索引的值推送至栈顶
0x31        daload                     将double型数组指定索引的值推送至栈顶
0x32        aaload                     将引用型数组指定索引的值推送至栈顶
0x33        baload                     将boolean或byte型数组指定索引的值推送至栈顶
0x34        caload                     将char型数组指定索引的值推送至栈顶
0x35        saload                     将short型数组指定索引的值推送至栈顶
六、store系列
6.1、store系列A
该系列命令负责把栈顶的值存入本地变量。这里的本地变量不仅可以是数值类型，还可以是引用类型。
如果是把栈顶的值存入到前四个本地变量的话，采用的是istore_0,istore_1，istore_2，istore_3(它们分别表示第0,1,2,3个本地整形变量)这种不到参数的简化命令形式。如果是把栈顶的值存入到第四个以上本地变量的话，将使用istore命令这种形式，在它后面给一参数，以表示是把栈顶的值存入到第几个(从0开始)本地变量中。
对本地变量所进行的编号，是对所有类型的本地变量进行的（并不按照类型分类）。
对于非静态函数，第一变量是this,它是只读的.
还有函数传入参数也算本地变量，在进行编号时，它是先于函数体的本地变量的。
指令码    助记符                               说明
0x36         istore                    将栈顶int型数值存入指定本地变量
0x37         lstore                    将栈顶long型数值存入指定本地变量
0x38         fstore                    将栈顶float型数值存入指定本地变量
0x39         dstore                   将栈顶double型数值存入指定本地变量
0x3a         astore                   将栈顶引用型数值存入指定本地变量
0x3b         istore_0                将栈顶int型数值存入第一个本地变量
0x3c         istore_1                将栈顶int型数值存入第二个本地变量
0x3d         istore_2                将栈顶int型数值存入第三个本地变量
0x3e         istore_3                将栈顶int型数值存入第四个本地变量
0x3f          lstore_0                将栈顶long型数值存入第一个本地变量
0x40         lstore_1                将栈顶long型数值存入第二个本地变量
0x41         lstore_2                将栈顶long型数值存入第三个本地变量
0x42         lstore_3                将栈顶long型数值存入第四个本地变量
0x43         fstore_0                将栈顶float型数值存入第一个本地变量
0x44         fstore_1                将栈顶float型数值存入第二个本地变量
0x45         fstore_2                将栈顶float型数值存入第三个本地变量
0x46         fstore_3                将栈顶float型数值存入第四个本地变量
0x47         dstore_0               将栈顶double型数值存入第一个本地变量
0x48         dstore_1               将栈顶double型数值存入第二个本地变量
0x49         dstore_2               将栈顶double型数值存入第三个本地变量
0x4a         dstore_3               将栈顶double型数值存入第四个本地变量
0x4b         astore_0               将栈顶引用型数值存入第一个本地变量
0x4c         astore_1               将栈顶引用型数值存入第二个本地变量
0x4d        astore_2                将栈顶引用型数值存入第三个本地变量
0x4e        astore_3                将栈顶引用型数值存入第四个本地变量
6.2、store系列B
该系列命令负责把栈顶项的值存到数组里。该命令根据栈里内容来确定对哪个数组的哪项进行操作。
比如，如下代码:
int moneys[]=new int[5];
moneys[1]=100;
其对应的指令为：
   49:
iconst_5
   50:
newarray int
   52:
astore 11
   54:
aload
11
   56:
iconst_1
   57:
bipush
100
   59:
iastore
   60:
lload 6       //因为str在我的程序中是其所非静态在函数的第6个变量(从0开始计数).
指令码    助记符                                   说明
0x4f         iastore               将栈顶int型数值存入指定数组的指定索引位置
0x50        lastore               将栈顶long型数值存入指定数组的指定索引位置
0x51        fastore               将栈顶float型数值存入指定数组的指定索引位置
0x52        dastore              将栈顶double型数值存入指定数组的指定索引位置
0x53        aastore              将栈顶引用型数值存入指定数组的指定索引位置
0x54        bastore              将栈顶boolean或byte型数值存入指定数组的指定索引位置
0x55        castore              将栈顶char型数值存入指定数组的指定索引位置
0x56        sastore              将栈顶short型数值存入指定数组的指定索引位置
七、pop系列
该系列命令似乎只是简单对栈顶进行操作，更多详情待补充。
指令码     助记符                                   说明
0x57            pop           将栈顶数值弹出 (数值不能是long或double类型的)
0x58            pop2         将栈顶的一个（long或double类型的)或两个数值弹出（其它）
0x59            dup           复制栈顶数值(数值不能是long或double类型的)并将复制值压入栈顶
0x5a            dup_x1     复制栈顶数值(数值不能是long或double类型的)并将两个复制值压入栈顶
0x5b            dup_x2     复制栈顶数值(数值不能是long或double类型的)并将三个（或两个）复制值压入栈顶
0x5c            dup2         复制栈顶一个（long或double类型的)或两个（其它）数值并将复制值压入栈顶
0x5d            dup2_x1    复制栈顶数值(long或double类型的)并将两个复制值压入栈顶
0x5e            dup2_x2     复制栈顶数值(long或double类型的)并将三个（或两个）复制值压入栈顶
八、栈顶元素数学操作及移位操作系列
该系列命令用于对栈顶元素行数学操作，和对数值进行移位操作。移位操作的操作数和要移位的数都是从栈里取得。
比如对于代码：int k=100;k=k>>1;其对应的JVM指令为：
   60:
bipush 100
   62:
istore 12//因为k在我的程序中是其所在非静态函数的第12个变量(从0开始计数).
   64:
iload 12
   66:
iconst_1
   67:
ishr
   68:
istore 12
指令码     助记符                                        说明
0x5f             swap               将栈最顶端的两个数值互换(数值不能是long或double类型的)
0x60            iadd                将栈顶两int型数值相加并将结果压入栈顶
0x61            ladd                将栈顶两long型数值相加并将结果压入栈顶
0x62            fadd               将栈顶两float型数值相加并将结果压入栈顶
0x63            dadd              将栈顶两double型数值相加并将结果压入栈顶
0x64            isub               将栈顶两int型数值相减并将结果压入栈顶
0x65            lsub              将栈顶两long型数值相减并将结果压入栈顶
0x66            fsub              将栈顶两float型数值相减并将结果压入栈顶
0x67            dsub             将栈顶两double型数值相减并将结果压入栈顶
0x68            imul              将栈顶两int型数值相乘并将结果压入栈顶
0x69            lmul              将栈顶两long型数值相乘并将结果压入栈顶
0x6a            fmul              将栈顶两float型数值相乘并将结果压入栈顶
0x6b            dmul             将栈顶两double型数值相乘并将结果压入栈顶
0x6c            idiv               将栈顶两int型数值相除并将结果压入栈顶
0x6d            ldiv               将栈顶两long型数值相除并将结果压入栈顶
0x6e            fdiv               将栈顶两float型数值相除并将结果压入栈顶
0x6f            ddiv               将栈顶两double型数值相除并将结果压入栈顶
0x70           irem               将栈顶两int型数值作取模运算并将结果压入栈顶
0x71           lrem               将栈顶两long型数值作取模运算并将结果压入栈顶
0x72           frem               将栈顶两float型数值作取模运算并将结果压入栈顶
0x73           drem              将栈顶两double型数值作取模运算并将结果压入栈顶
0x74            ineg              将栈顶int型数值取负并将结果压入栈顶
0x75            lneg              将栈顶long型数值取负并将结果压入栈顶
0x76           fneg              将栈顶float型数值取负并将结果压入栈顶
0x77           dneg             将栈顶double型数值取负并将结果压入栈顶
0x78            ishl               将int型数值左移位指定位数并将结果压入栈顶
0x79            lshl               将long型数值左移位指定位数并将结果压入栈顶
0x7a            ishr               将int型数值右（符号）移位指定位数并将结果压入栈顶
0x7b            lshr               将long型数值右（符号）移位指定位数并将结果压入栈顶
0x7c            iushr             将int型数值右（无符号）移位指定位数并将结果压入栈顶
0x7d           lushr              将long型数值右（无符号）移位指定位数并将结果压入栈顶
0x7e           iand               将栈顶两int型数值作“按位与”并将结果压入栈顶
0x7f            land               将栈顶两long型数值作“按位与”并将结果压入栈顶
0x80            ior                 将栈顶两int型数值作“按位或”并将结果压入栈顶
0x81            lor                 将栈顶两long型数值作“按位或”并将结果压入栈顶
0x82            ixor               将栈顶两int型数值作“按位异或”并将结果压入栈顶
0x83            lxor               将栈顶两long型数值作“按位异或”并将结果压入栈顶
